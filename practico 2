PRACTICO 2 â€“ VECTORES-INTENSIVO.
AUTOR:Paola Rocio cruz
// practico 2.vectores.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <iostream>
#include"conio.h"
#include "math.h"
#include "time.h"
using namespace std;

void cargar (int v[],int n);
int digits (int n);
void mostrar (int v[],int n);
int contarElem(int v[],int n,int x);
void eliminarElem(int v[],int &n,int x);
int buscarElem(int v[],int n,int x);
void sumarcruzado(int v1[],int v2[],int v3[],int n);
int invertir( int n);
int sumadigs(int n);
void cargarSecuen1(int v[],int n);
void secuencia2(int v[],int n);
void ordenarascendente(int v[],int n);
void insertar(int v[],int &n,int x;)
void cargarSec3 (int v[],int n);
void recorrer (int v[],int n);
bool existeElem(int vec [], int n, int elem);
void unirVec( int v1[], int v2[], int v3 [], int n1, int n2, int &n3);
bool verifFib(int n);
int obtNesimoFib (int n);
bool VerifPrimo(int n);
int obtNsimoPrimo (int n);
void cargarFiboPrimInv( int v[],int n);
int elimPar (int n);
void elimDigPar(int v1[], int v2[], int n);


void main()
{int n,v[40],v1[40],x,v2[40],v3[40],opcion,n1,n2,n3;
do {cout<<endl<<endl<<"PRACTICO 2";
	cout<<endl<<endl<<"------MENU------";
	cout<<endl<<"1.-Frecuencia de un numero en el vector";
	cout<<endl<<"2.-Borrar elemento de un vector.";
	cout<<endl<<"3.-Buscar posicion del elemento.";
	cout<<endl<<"4.-Suma cruzada de vectores.";
	cout<<endl<<"5.-insertar un numero de manera ordenada.";
	cout<<endl<<"6.-Recorrer vector.:";
	cout<<endl<<"7.-cargar vector en la secuencia 1,4,9,61,52,63,94...";
	cout<<endl<<"8.-Cargar vector en la secuencia 1,1,2,4,8,16,23,28,38,49...";
	cout<<endl<<"9.-Cargar vector en la secuencia 1,1,2,4,8,7,5,10,11,13,8...";
	cout<<endl<<"10.-Union de vectores.";
	cout<<endl<<"11.-Cargar automaticamente vector con fiboanacci y primos invertido";
	cout<<endl<<"12.-Eliminar digitos pares de elementos de un vector.";
	cout<<endl<<"0.-Salir.";
	cout<<endl<<"Seleccione una opcion.";
	cin>>opcion;
	system("cls");
	switch (opcion){
		case 1:
			cout<<"introducir cant. de elementos: ";
			cin>>n;
			cargar(v,n);
			cout<<"introducir elemento a contar: ";
			cin>>x;
			cout<<"La frecuencia del elemento es: "<<contarElem(v,n,x);
			break;

		case 2:
			cout<<"introducir cant de elementos: ";
			cin>>n;
			cargar(v,n);
			cout<<"introducir elemnto a eliminar: ";
			cin>>x;
			eliminarElem(v,n,x);
			mostrar(v,n);
			break;
		case 3:cout<<"ingrese la cant de elementos: ";
			cin>>n;
			cargar(v,n);
			cout<<"ingrese el elemento a buscar: ";
			cin>>x;
			cout <<" el elemento se encuentra en la posicion: "<<buscarElem(v,n,x);
			break;
		case 4:cout<<"ingrese cant de elementos: ";
			cin>>n;
			cout<<endl<<"cargar vector 1."<<endl;
			cargar(v1,n);
			cout<<endl<<"cargar vector 2."<<endl;
			cargar(v2,n);
			sumarcruzado(v1,v2,v3,n);
			cout<<endl<<"vector resultante"<<endl;
			mostrar(v3,n);
			break; 
		case 5:cout<<"ingrese la cantidad de elementos: ";
			cin>>n;
			cout<<"ingrese el vector ordenado"<<endl;
			cargar(v,n);
			ordenarascendente(v,n);
			mostrar(v,n);
			cout<<"ingrese el elemento a aumentar";
			cin>>x;
			insertar(v,n,x);
			mostrar (v,n);
			break;
		case 6:cout<<"\nIntroducir numero de elementos  del vector: ";
			cin>> n;
			cargar(v,n);
			recorrer (v,n);
			mostrar(v,n);
			break;
		case 7:cout<<"ingrese cant de elementos: ";
			cin>>n;
			cargarSecuen1(v,n);
			mostrar(v,n);
			break;
		case 8:cout<<"Introduzca dimension del vector: ";
			cin>>n;
			secuencia2(v,n);
			mostrar (v,n);
			break;
		case 9:cout<< "\nIntroducir numero de elementos : ";
			cin>> n;
			cargarSec3 (v,n);
			mostrar(v,n);
			break;

		case 10:cout<< "\nIntroducir numero de elementos del vector 1 : ";
			cin>> n1;
			cout<< "\nCargar vector 1 ";
			cargar(v,n1);
			cout<< "\nIntroducir numero de elementos del vector 2 : ";
			cin>> n2;
			cout<< "\nCargar vector 2 ";
			cargar(v2,n2);
			unirVec( v,v2,v3,n1,n2,n3);
			mostrar(v3,n3);
			break;
			 
		case 11:cout<< "\nIntroducir numero de elementos : ";
			cin>> n;
			cargarFiboPrimInv(v,n);
			mostrar(v,n);
			break;

		case 12:cout<< "\nIntroducir numero de elementos  del vector: ";
			cin>> n;
			cargar(v,n);
			elimDigPar(v,v2,n);
			mostrar(v2,n);
			break;

		case 0:cout<<"SALIR";
			break;

		default:cout<<"opcion no valida";
			break;
		}
		getch();
	}while(opcion != 0);
		}



int sumadigs(int n)
{int d,s=0,m=n,t;
while(n>0)
{d=n%10;
n=n/10;
s=s+d;
}
t=s+m;
return t;
}

void secuencia2(int v[],int n)
{int i,s=0,d;
v[0]=1;v[1]=1;
for(i=2;i<n;i++)
{v[i]=sumadigs(v[i-1]);
}
}

void cargar (int v[],int n)
{for(int i=0 ;i<n ;i++)
	{cout<<"ingrese elemento: ";
	cin>> v[i];
	}
}

void mostrar (int v[],int n)
{for (int i=0;i<n ;i++)
	cout<<endl<<"v["<<i<<"]: "<<v[i];
}

int contarElem(int v[],int n,int x)
{int k=0;
	for(int i=0;i<n;i++)
	{if (x == v[i])
		k = k +1;
	}
	return k;
}

void eliminarElem(int v[],int &n,int x)
{for(int i=0;i<n;i++)
	if(v[i] == x)
	{for(int j=i;j<n;j++)
		{v[j]= v[j+1];
		}
	n--;
	i--;
	}}
int buscarElem(int v[],int n,int x)
{int pos= -1,i;
for(i=0;i<n;i++)
	{if(v[i]== x)
	 pos = i;
	}
return(pos);
}

void sumarcruzado(int v1[],int v2[],int v3[],int n)
{int i;
	for (i=0; i<n;i++)
	{v3[i]= v1[i]+v2[n-1-i];}
}

void cargarSecuen1(int v[],int n)
{int x,num,c=1;
	for (int i=0;i<=n;i++)
	{
	num = invertir(c*c);
	c++;
	v[i]=num;
}}


void recorrer (int v[],int n){
	int i, aux=v[0];
	for (i=0;i<n;i++)
		v[i]=v[i+1];
	v[n-1]=aux;}

int invertir( int n)
{int r,numinv;
numinv =0;
while (n>0)
	{r = n % 10;
	 n = n/10;
	numinv = numinv*10 + r;
	}
return numinv;
}

void ordenarascendente(int v[],int n)
{int aux;
	for (int i=0;i<n;i++)
	{for(int j=i+1;j<n;j++)
		if(v[j]<v[i])
		{aux=v[j];
			v[j]=v[i];
			v[i]= aux;
	}}}

void insertar(int v[],int &n,int x)
{ int pos,i=0;
{while(v[i]<x)
		{i++;}
		pos = i;
		if (v[n-1] > x)
		{for(int i=n; i>pos;i--)
			{v[i]=v[i-1];}
	v[pos]=	x;
	n++;}}
if(v[n-1]<= x)
{v[n]=x;
 n++;}}
void cargarSec3 (int v[],int n){
	int j=1,i,s=1,x=0,z=0,aux;
	v[0]=1;
	for (i=1;i<n;i++){
		while(s>0){
			x=x+s%10;
			s=s/10;}
		s=x;
		aux=x;
		while(aux>0){
			z=z+aux%10;
			aux=aux/10;}
		v[j]=z;
		z=0;
	j++;}}


bool existeElem(int vec [], int n, int elem){
	int i;
	bool k=false;
	for(i=0;i<n;i++){
		if(vec[i]==elem){
			k=true;}
	}
	return (k);}

void unirVec( int v1[], int v2[], int v3 [], int n1, int n2, int &n3){
	int i;
	n3=0;
	for(i=0;i<n1;i++){
		v3[i]=v1[i];
		n3++;}
	for(i=0;i<n2;i++){
		if(existeElem(v3,n3,v2[i])==false){
			v3[n3]=v2[i];
			n3++;}
	}
}

bool verifFib(int n)
{int a=-1,b=1,c;
bool k=false;
while(c<=n)
	{c=a+b;
	a=b;
	b=c;
		if(n==c)
		{k=true;}
}
return(k);}

int obtNesimoFib (int n)
{int i=0, x=0;
if(n<=1){
	return (1);}
else{
while (i<n){
	x++;
	if(verifFib(x)==true){
		i++;}}
	return(x);}
}
bool VerifPrimo(int n)
 {int i,a=0;
 bool k;
 for(i=2;i<n;i++){  
	if(n%i==0){  
		a++;}  
	}  
	if(a!=0){  
        k=false;
    }else{  
        k=true;}
return(k);}

int obtNsimoPrimo (int n)
{int i=0, x=0;
while (i<n){
	x++;
	if(VerifPrimo(x)==true){
		i++;}}
return(x);}

void cargarFiboPrimInv( int v[],int n){
	int i,j=0;
	for(i=0;i<n/2;i++){
		v[i]=obtNsimoPrimo(n/2-i);}
	for(i=n/2;i<n;i++){
		v[i]=obtNesimoFib(n/2-j-1);
	j++;}
	}

int elimPar (int n){
	int s=0, i=1,d;
	while (n>0){
		d=n%10;
		if(d%2!=0){
			s=s+d*i;
			i=i*10;}
		n=n/10;}
	return (s);
}


void elimDigPar(int v1[], int v2[], int n){
	int i;
	for(i=0;i<n;i++)
		v2[i]=elimPar(v1[i]);}

